// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// monero_c bindings
class ZanoC {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ZanoC(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ZanoC.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> ZANO_PlainWallet_init(
    ffi.Pointer<ffi.Char> address,
    ffi.Pointer<ffi.Char> working_dir,
    int log_level,
  ) {
    return _ZANO_PlainWallet_init(
      address,
      working_dir,
      log_level,
    );
  }

  late final _ZANO_PlainWallet_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('ZANO_PlainWallet_init');
  late final _ZANO_PlainWallet_init = _ZANO_PlainWallet_initPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> ZANO_PlainWallet_init2(
    ffi.Pointer<ffi.Char> ip,
    ffi.Pointer<ffi.Char> port,
    ffi.Pointer<ffi.Char> working_dir,
    int log_level,
  ) {
    return _ZANO_PlainWallet_init2(
      ip,
      port,
      working_dir,
      log_level,
    );
  }

  late final _ZANO_PlainWallet_init2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('ZANO_PlainWallet_init2');
  late final _ZANO_PlainWallet_init2 = _ZANO_PlainWallet_init2Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> ZANO_PlainWallet_reset() {
    return _ZANO_PlainWallet_reset();
  }

  late final _ZANO_PlainWallet_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'ZANO_PlainWallet_reset');
  late final _ZANO_PlainWallet_reset =
      _ZANO_PlainWallet_resetPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> ZANO_PlainWallet_setLogLevel(
    int log_level,
  ) {
    return _ZANO_PlainWallet_setLogLevel(
      log_level,
    );
  }

  late final _ZANO_PlainWallet_setLogLevelPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'ZANO_PlainWallet_setLogLevel');
  late final _ZANO_PlainWallet_setLogLevel = _ZANO_PlainWallet_setLogLevelPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> ZANO_PlainWallet_getVersion() {
    return _ZANO_PlainWallet_getVersion();
  }

  late final _ZANO_PlainWallet_getVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'ZANO_PlainWallet_getVersion');
  late final _ZANO_PlainWallet_getVersion = _ZANO_PlainWallet_getVersionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> ZANO_PlainWallet_getWalletFiles() {
    return _ZANO_PlainWallet_getWalletFiles();
  }

  late final _ZANO_PlainWallet_getWalletFilesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'ZANO_PlainWallet_getWalletFiles');
  late final _ZANO_PlainWallet_getWalletFiles =
      _ZANO_PlainWallet_getWalletFilesPtr.asFunction<
          ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> ZANO_PlainWallet_getExportPrivateInfo(
    ffi.Pointer<ffi.Char> target_dir,
  ) {
    return _ZANO_PlainWallet_getExportPrivateInfo(
      target_dir,
    );
  }

  late final _ZANO_PlainWallet_getExportPrivateInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('ZANO_PlainWallet_getExportPrivateInfo');
  late final _ZANO_PlainWallet_getExportPrivateInfo =
      _ZANO_PlainWallet_getExportPrivateInfoPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ZANO_PlainWallet_deleteWallet(
    ffi.Pointer<ffi.Char> file_name,
  ) {
    return _ZANO_PlainWallet_deleteWallet(
      file_name,
    );
  }

  late final _ZANO_PlainWallet_deleteWalletPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('ZANO_PlainWallet_deleteWallet');
  late final _ZANO_PlainWallet_deleteWallet = _ZANO_PlainWallet_deleteWalletPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ZANO_PlainWallet_getAddressInfo(
    ffi.Pointer<ffi.Char> addr,
  ) {
    return _ZANO_PlainWallet_getAddressInfo(
      addr,
    );
  }

  late final _ZANO_PlainWallet_getAddressInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('ZANO_PlainWallet_getAddressInfo');
  late final _ZANO_PlainWallet_getAddressInfo =
      _ZANO_PlainWallet_getAddressInfoPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ZANO_PlainWallet_getAppconfig(
    ffi.Pointer<ffi.Char> encryption_key,
  ) {
    return _ZANO_PlainWallet_getAppconfig(
      encryption_key,
    );
  }

  late final _ZANO_PlainWallet_getAppconfigPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('ZANO_PlainWallet_getAppconfig');
  late final _ZANO_PlainWallet_getAppconfig = _ZANO_PlainWallet_getAppconfigPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ZANO_PlainWallet_setAppconfig(
    ffi.Pointer<ffi.Char> conf_str,
    ffi.Pointer<ffi.Char> encryption_key,
  ) {
    return _ZANO_PlainWallet_setAppconfig(
      conf_str,
      encryption_key,
    );
  }

  late final _ZANO_PlainWallet_setAppconfigPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('ZANO_PlainWallet_setAppconfig');
  late final _ZANO_PlainWallet_setAppconfig =
      _ZANO_PlainWallet_setAppconfigPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ZANO_PlainWallet_generateRandomKey(
    int lenght,
  ) {
    return _ZANO_PlainWallet_generateRandomKey(
      lenght,
    );
  }

  late final _ZANO_PlainWallet_generateRandomKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Uint64)>>(
          'ZANO_PlainWallet_generateRandomKey');
  late final _ZANO_PlainWallet_generateRandomKey =
      _ZANO_PlainWallet_generateRandomKeyPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> ZANO_PlainWallet_getLogsBuffer() {
    return _ZANO_PlainWallet_getLogsBuffer();
  }

  late final _ZANO_PlainWallet_getLogsBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'ZANO_PlainWallet_getLogsBuffer');
  late final _ZANO_PlainWallet_getLogsBuffer =
      _ZANO_PlainWallet_getLogsBufferPtr.asFunction<
          ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> ZANO_PlainWallet_truncateLog() {
    return _ZANO_PlainWallet_truncateLog();
  }

  late final _ZANO_PlainWallet_truncateLogPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'ZANO_PlainWallet_truncateLog');
  late final _ZANO_PlainWallet_truncateLog = _ZANO_PlainWallet_truncateLogPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> ZANO_PlainWallet_getConnectivityStatus() {
    return _ZANO_PlainWallet_getConnectivityStatus();
  }

  late final _ZANO_PlainWallet_getConnectivityStatusPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'ZANO_PlainWallet_getConnectivityStatus');
  late final _ZANO_PlainWallet_getConnectivityStatus =
      _ZANO_PlainWallet_getConnectivityStatusPtr.asFunction<
          ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> ZANO_PlainWallet_open(
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> password,
  ) {
    return _ZANO_PlainWallet_open(
      path,
      password,
    );
  }

  late final _ZANO_PlainWallet_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('ZANO_PlainWallet_open');
  late final _ZANO_PlainWallet_open = _ZANO_PlainWallet_openPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ZANO_PlainWallet_restore(
    ffi.Pointer<ffi.Char> seed,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> password,
    ffi.Pointer<ffi.Char> seed_password,
  ) {
    return _ZANO_PlainWallet_restore(
      seed,
      path,
      password,
      seed_password,
    );
  }

  late final _ZANO_PlainWallet_restorePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('ZANO_PlainWallet_restore');
  late final _ZANO_PlainWallet_restore =
      _ZANO_PlainWallet_restorePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ZANO_PlainWallet_generate(
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> password,
  ) {
    return _ZANO_PlainWallet_generate(
      path,
      password,
    );
  }

  late final _ZANO_PlainWallet_generatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('ZANO_PlainWallet_generate');
  late final _ZANO_PlainWallet_generate =
      _ZANO_PlainWallet_generatePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ZANO_PlainWallet_getOpenWallets() {
    return _ZANO_PlainWallet_getOpenWallets();
  }

  late final _ZANO_PlainWallet_getOpenWalletsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'ZANO_PlainWallet_getOpenWallets');
  late final _ZANO_PlainWallet_getOpenWallets =
      _ZANO_PlainWallet_getOpenWalletsPtr.asFunction<
          ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> ZANO_PlainWallet_getWalletStatus(
    int h,
  ) {
    return _ZANO_PlainWallet_getWalletStatus(
      h,
    );
  }

  late final _ZANO_PlainWallet_getWalletStatusPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int64)>>(
          'ZANO_PlainWallet_getWalletStatus');
  late final _ZANO_PlainWallet_getWalletStatus =
      _ZANO_PlainWallet_getWalletStatusPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> ZANO_PlainWallet_closeWallet(
    int h,
  ) {
    return _ZANO_PlainWallet_closeWallet(
      h,
    );
  }

  late final _ZANO_PlainWallet_closeWalletPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int64)>>(
          'ZANO_PlainWallet_closeWallet');
  late final _ZANO_PlainWallet_closeWallet = _ZANO_PlainWallet_closeWalletPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> ZANO_PlainWallet_invoke(
    int h,
    ffi.Pointer<ffi.Char> params,
  ) {
    return _ZANO_PlainWallet_invoke(
      h,
      params,
    );
  }

  late final _ZANO_PlainWallet_invokePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int64, ffi.Pointer<ffi.Char>)>>('ZANO_PlainWallet_invoke');
  late final _ZANO_PlainWallet_invoke = _ZANO_PlainWallet_invokePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ZANO_PlainWallet_asyncCall(
    ffi.Pointer<ffi.Char> method_name,
    int instance_id,
    ffi.Pointer<ffi.Char> params,
  ) {
    return _ZANO_PlainWallet_asyncCall(
      method_name,
      instance_id,
      params,
    );
  }

  late final _ZANO_PlainWallet_asyncCallPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Uint64,
              ffi.Pointer<ffi.Char>)>>('ZANO_PlainWallet_asyncCall');
  late final _ZANO_PlainWallet_asyncCall =
      _ZANO_PlainWallet_asyncCallPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ZANO_PlainWallet_tryPullResult(
    int instance_id,
  ) {
    return _ZANO_PlainWallet_tryPullResult(
      instance_id,
    );
  }

  late final _ZANO_PlainWallet_tryPullResultPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Uint64)>>(
          'ZANO_PlainWallet_tryPullResult');
  late final _ZANO_PlainWallet_tryPullResult =
      _ZANO_PlainWallet_tryPullResultPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> ZANO_PlainWallet_syncCall(
    ffi.Pointer<ffi.Char> method_name,
    int instance_id,
    ffi.Pointer<ffi.Char> params,
  ) {
    return _ZANO_PlainWallet_syncCall(
      method_name,
      instance_id,
      params,
    );
  }

  late final _ZANO_PlainWallet_syncCallPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Uint64,
              ffi.Pointer<ffi.Char>)>>('ZANO_PlainWallet_syncCall');
  late final _ZANO_PlainWallet_syncCall =
      _ZANO_PlainWallet_syncCallPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  bool ZANO_PlainWallet_isWalletExist(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _ZANO_PlainWallet_isWalletExist(
      path,
    );
  }

  late final _ZANO_PlainWallet_isWalletExistPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>(
          'ZANO_PlainWallet_isWalletExist');
  late final _ZANO_PlainWallet_isWalletExist =
      _ZANO_PlainWallet_isWalletExistPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ZANO_PlainWallet_getWalletInfo(
    int h,
  ) {
    return _ZANO_PlainWallet_getWalletInfo(
      h,
    );
  }

  late final _ZANO_PlainWallet_getWalletInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int64)>>(
          'ZANO_PlainWallet_getWalletInfo');
  late final _ZANO_PlainWallet_getWalletInfo =
      _ZANO_PlainWallet_getWalletInfoPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> ZANO_PlainWallet_resetWalletPassword(
    int h,
    ffi.Pointer<ffi.Char> password,
  ) {
    return _ZANO_PlainWallet_resetWalletPassword(
      h,
      password,
    );
  }

  late final _ZANO_PlainWallet_resetWalletPasswordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int64,
              ffi.Pointer<ffi.Char>)>>('ZANO_PlainWallet_resetWalletPassword');
  late final _ZANO_PlainWallet_resetWalletPassword =
      _ZANO_PlainWallet_resetWalletPasswordPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>)>();

  int ZANO_PlainWallet_getCurrentTxFee(
    int priority,
  ) {
    return _ZANO_PlainWallet_getCurrentTxFee(
      priority,
    );
  }

  late final _ZANO_PlainWallet_getCurrentTxFeePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Uint64)>>(
          'ZANO_PlainWallet_getCurrentTxFee');
  late final _ZANO_PlainWallet_getCurrentTxFee =
      _ZANO_PlainWallet_getCurrentTxFeePtr.asFunction<int Function(int)>();

  void ZANO_free(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _ZANO_free(
      ptr,
    );
  }

  late final _ZANO_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'ZANO_free');
  late final _ZANO_free =
      _ZANO_freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> ZANO_checksum_wallet2_api_c_h() {
    return _ZANO_checksum_wallet2_api_c_h();
  }

  late final _ZANO_checksum_wallet2_api_c_hPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'ZANO_checksum_wallet2_api_c_h');
  late final _ZANO_checksum_wallet2_api_c_h = _ZANO_checksum_wallet2_api_c_hPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> ZANO_checksum_wallet2_api_c_cpp() {
    return _ZANO_checksum_wallet2_api_c_cpp();
  }

  late final _ZANO_checksum_wallet2_api_c_cppPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'ZANO_checksum_wallet2_api_c_cpp');
  late final _ZANO_checksum_wallet2_api_c_cpp =
      _ZANO_checksum_wallet2_api_c_cppPtr.asFunction<
          ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> ZANO_checksum_wallet2_api_c_exp() {
    return _ZANO_checksum_wallet2_api_c_exp();
  }

  late final _ZANO_checksum_wallet2_api_c_expPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'ZANO_checksum_wallet2_api_c_exp');
  late final _ZANO_checksum_wallet2_api_c_exp =
      _ZANO_checksum_wallet2_api_c_expPtr.asFunction<
          ffi.Pointer<ffi.Char> Function()>();
}
